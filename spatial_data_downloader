#!/bin/bash

###################################################################################################################
#                                                                                                                 #
# Returns the geospatial data of airports from skyscanner's database.                                             #
# Register for apikey here: http://portal.business.skyscanner.net/en-gb/accounts/login/                           #
#                                                                                                                 #
# usage:                                                                                                          #
# 	~$ ./spatial_data_downloader -apk={apikey}                                                                    #
#                                                                                                                 #
###################################################################################################################


##### Functions

unwrap_continents()
{
	# creating continent level csv table from geo_catalog.json
	infile=$1
    outfile=$2
    jq '.Continents[] | {ContinentId: .Id, 
	ContinentName: .Name,
	CountryId: .Countries[].Id
	} | join("|")' $infile > tmp1.csv 
	awk '!v[$1]++' tmp1.csv > $outfile 
	sed -i -e 's/|/"|"/g' -e 's/|/,/g' $outfile
	sed -i 1i'"ContinentId","ContinentName","CountryId"' $outfile
	rm -f tmp1.csv 
}

unwrap_countries()
{
	# creating country level csv table from geo_catalog.json
	infile=$1
    outfile=$2
    jq '.Continents[].Countries[] | {
	CountryId: .Id, 
	CountryName: .Name, 
	CurrencyId: .CurrencyId, 
	LanguageId: .LanguageId
	} | join("|")' $infile > tmp2.csv 
	awk '!v[$1]++' tmp2.csv > $outfile 
	sed -i -e 's/|/"|"/g' -e 's/|/,/g' $outfile 
	sed -i 1i'"CountryId","CountryName","CurrencyId","LanguageId"' $outfile 
	rm -f tmp2.csv 
}

unwrap_cities()
{
	# creating city level csv table from geo_catalog.json
	# geocodes are in one column, so they should be separated
	infile=$1
    outfile=$2
    jq '.Continents[].Countries[].Cities[] | {
	CityId: .Id, 
	CityName: .Name, 
	CityLocation: .Location, 
	CityCountryId: .CountryId, 
	CityIataCode: .IataCode, 
	CitySingleAirportCity: (.SingleAirportCity | tostring)
	} | join("|")' $infile > tmp3.csv  
	awk '!v[$1]++' tmp3.csv > $outfile 
	sed -i -e 's/|/"|"/g' -e 's/|/,/g' $outfile  
	awk -F "," '{print $3}' $outfile > tmpLon.csv 
	sed -i 's/$/"/g' tmpLon.csv 
	awk -F "," '{print $4}' $outfile > tmpLat.csv  
	sed -i 's/ /\"/' tmpLat.csv  
	paste -d, $outfile tmpLon.csv > tmp3.csv 
	paste -d, tmp3.csv tmpLat.csv > $outfile 
	cut --delimiter="," -f3,4 --complement $outfile > tmp3.csv 
	sed 1i'"CityId","CityName","CountryId","CityIataCode","CitySingleAirportCity","CityLon","CityLat"' tmp3.csv > $outfile  
	rm -f tmp3.csv tmpLon.csv tmpLat.csv 
}

unwrap_airports()
{
	# creating airport level csv table from geo_catalog.json
	# geocodes are in one column, so they should be separated 
	infile=$1
    outfile=$2
    jq '.Continents[].Countries[].Cities[].Airports[] | {
	AirportId: .Id, 
	AirportName: .Name, 
	AirportLocation: .Location, 
	AirportCountryId: .CountryId, 
	AirportCityId: .CityId
	} | join("|")' $infile > tmp4.csv  
	awk '!v[$1]++' tmp4.csv > $outfile  
	sed -i -e 's/|/"|"/g' -e 's/|/,/g' $outfile
	awk -F "," '{print $3}' $outfile > tmpLon.csv 
	sed -i 's/$/"/g' tmpLon.csv 
	awk -F "," '{print $4}' $outfile > tmpLat.csv 
	sed -i 's/ /\"/' tmpLat.csv  
	paste -d, $outfile tmpLon.csv > tmp4.csv 
	paste -d, tmp4.csv tmpLat.csv > $outfile 
	cut --delimiter="," -f3,4 --complement $outfile > tmp4.csv 
	sed 1i'"AirportId","AirportName","CountryId","CityId","AirportLon","AirportLat"' tmp4.csv > $outfile
	rm -f tmp4.csv tmpLon.csv tmpLat.csv 
}

unwrap_locales()
{
	#  creating csv table from locales.json
	infile=$1
    outfile=$2
    jq '.Locales[] | {
	Code: .Code,
	Name: .Name
	} | join("|")' $infile > tmp5.csv  
	awk '!v[$1]++' tmp5.csv > $outfile  
	sed -i -e 's/|/"|"/g' -e 's/|/,/g' $outfile  
	awk '{$3=","substr($1, 1, 3)"\""; $4=",\""toupper(substr($1, 5, 3)); print $1,$2,$3,$4}' $outfile > tmp5.csv
	sed -i 's/\" ,\"/\",\"/g' tmp5.csv
	sed 1i'"LocaleCode","LocaleName","LanguageId","CountryId"' tmp5.csv > $outfile 
	rm -f tmp5.csv 
}
unwrap_currencies()
{
	# creating csv table from currencies.json
	infile=$1
    outfile=$2
    jq '.Currencies[] | {
	Code: .Code,
	Symbol: .Symbol,
	ThousandsSeparator: .ThousandsSeparator,
	DecimalSeparator: .DecimalSeparator,
	SymbolOnLeft: (.SymbolOnLeft | tostring),
	SpaceBetweenAmountAndSymbol: (.SpaceBetweenAmountAndSymbol | tostring),
	RoundingCoefficient: (.RoundingCoefficient | tostring),
	DecimalDigits: (.DecimalDigits | tostring)
	} | join("|")' $infile > tmp6.csv  
	awk '!v[$1]++' tmp6.csv > $outfile  
	sed -i -e 's/|/"|"/g' -e 's/|/,/g' $outfile  
	sed -i 1i'"CurrencyId","CurrencySymbol","CurrencyThousandsSeparator","CurrencyDecimalSeparator","CurrencySymbolOnLeft","CurrencySpaceBetweenAmountAndSymbol","CurrencyRoundingCoefficient","CurrencyDecimalDigits"' $outfile
	rm -f tmp6.csv 
}



##### Main

# the following arguments should be provided by the user of this bash script
for i in "$@"
do
	case $i in
		-apk=*|--apikey=*)
			ApiKey="${i#*=}"
			shift # past argument=value
		;;
		*)
			# unknown option
		;;
	esac
done
wait

# it may work without ApiKey argument in case of stored ApiKey
length=${#ApiKey}
case "$length" in
	0) ApiKey=$(grep -w "Insiprational_Flights" ~/Documents/creds.csv | cut -d "," -f3) ;;
	esac 

# creating a data folder 
if [ ! -d "./_data" ]; 
	then   mkdir ./_data; 
fi
cd ./_data

# composing download links with arguments
link_a="http://partners.api.skyscanner.net/apiservices/geo/v1.0?apiKey="$ApiKey
link_b="http://partners.api.skyscanner.net/apiservices/reference/v1.0/locales?apiKey="$ApiKey
link_c="http://partners.api.skyscanner.net/apiservices/reference/v1.0/currencies?apiKey="$ApiKey

# downloading json files
#parallel --link --jobs=0 --eta --gnu curl -sL -o {1} {2} ::: geo_catalog.json locales.json currencies.json ::: $link_a $link_b $link_c
parallel --link --jobs=0 --eta --gnu wget -q -O {1} {2} ::: geo_catalog.json locales.json currencies.json ::: $link_a $link_b $link_c

# creating continent level csv table from geo_catalog.json
unwrap_continents geo_catalog.json continents.csv

# creating country level csv table from geo_catalog.json
unwrap_countries geo_catalog.json countries.csv

# It is useless to create region level csv table from geo_catalog.json because cannot be matched to the other part of the data.

# creating city level csv table from geo_catalog.json
# geocodes are in one column, so they should be separated
unwrap_cities geo_catalog.json cities.csv

# creating airport level csv table from geo_catalog.json
# geocodes are in one column, so they should be separated
unwrap_airports geo_catalog.json airports.csv

# creating csv table from locales.json
unwrap_locales locales.json locales.csv 

# creating csv table from currencies.json
unwrap_currencies currencies.json currencies.csv

# let us join together the parts
csvjoin -d, -u 1 -c "CityId, CityId" --left airports.csv cities.csv > geo_catalog.csv 
csvjoin -d, -u 1 -c "CountryId, CountryId" --left geo_catalog.csv countries.csv > tmp.csv 
csvjoin -d, -u 1 -c "CountryId, CountryId" --left tmp.csv continents.csv > geo_catalog.csv 
csvjoin -d, -u 1 -c "CurrencyId, CurrencyId" --left geo_catalog.csv currencies.csv > tmp.csv 
csvjoin -d, -u 1 -c "CountryId, CountryId" --left tmp.csv locales.csv > geo_catalog.csv 

# composing the columns into their natural order
awk -F"," -v OFS="," '{print $1, $2, $5, $6, $4, $7, $11, $12, $9, $10, $3, $13, $16, $17, $15, $14, $18, $19, $20, $21, $22, $23, $24, $25}' geo_catalog.csv > tmp.csv
cat tmp.csv > geo_catalog.csv

# removing intermediary files
rm -f tmp.csv continents.csv countries.csv cities.csv airports.csv locales.csv currencies.csv
