#!/bin/bash

###################################################################################################################
#                                                                                                                 #
# Retrieve the cheapest routes from our cache prices. The prices come from skyscanner's cached prices resulting   #
# from their users’ searches.                                                                                     #
#                                                                                                                 #
# Register for apikey here: http://portal.business.skyscanner.net/en-gb/accounts/login/                           #
#                                                                                                                 #
# -co={country}                                                                                                   #
# -cu={currency}                                                                                                  #
# -lo={locale}                                                                                                    #
# -orp={origin place}                                                                                             #
# -dep={destination place}                                                                                        #
# -oupd={outbound partial date}                                                                                   #
# -inpd={inbound partial date}     <- not compulsory                                                              #
# -apk={SkyScanner API key}                                                                                       #
#                                                                                                                 #
# usage:                                                                                                          #
# 	~$ ./browse_routes -co=HU -cu=HUF -lo=hu-HU -orp=HU -dep=UK -oupd=2017-05 -inpd=2017-05 -apk={apikey}         #
#                                                                                                                 #
###################################################################################################################


##### Functions

unwrap_routes()
{
	# creating csv table from routes.json
	infile=$1
	outfile=$2
	jq '.Routes[]? | {
	"OriginId": (.OriginId | tostring),
	"DestinationId": (.DestinationId | tostring),
	"QuoteIds": (.QuoteIds[]? | tostring),		
	"Price": (.Price | tostring),
	"QuoteDateTime": .QuoteDateTime
	} | join("¤")' $infile  > tmp0.csv
	awk '!v[$1]++' tmp0.csv > $outfile
	sed -i 's/¤/";"/g' $outfile
	sed -i 1i'"OriginId";"DestinationId";"QuoteIds";"Price";"QuoteDateTime"' $outfile
	rm -f tmp0.csv
	unset infile
	unset outfile
}


unwrap_quotes()
{
    # creating csv table from routes.json
    infile=$1
    outfile=$2
    jq '.Quotes[]? | {
	"QuoteId": (.QuoteId | tostring),
	"MinPrice": (.MinPrice | tostring),
	"Direct": (.Direct | tostring),
	"OutboundLegCarrierIds": (.OutboundLeg.CarrierIds[]? | tostring),
	"OutboundLegOriginId": (.OutboundLeg.OriginId | tostring),
	"OutboundLegDestinationId": (.OutboundLeg.DestinationId | tostring),
	"OutboundLegDepartureDate": .OutboundLeg.DepartureDate,
	"InboundLegCarrierIds": (.InboundLeg.CarrierIds[]? | tostring),
	"InboundLegOriginId": (.InboundLeg.OriginId | tostring),
	"InboundLegDestinationId": (.InboundLeg.DestinationId | tostring),
	"InboundLegDepartureDate": .InboundLeg.DepartureDate,
	"QuoteDateTime": .QuoteDateTime
	} | join("¤")' $infile  > tmp1.csv
	awk '!v[$1]++' tmp1.csv > $outfile
	sed -i 's/¤/";"/g' $outfile
	sed -i 1i'"QuoteId";"MinPrice";"Direct";"OutboundLegCarrierIds";"OutboundLegOriginId";"OutboundLegDestinationId";"OutboundLegDepartureDate";"InboundLegCarrierIds";"InboundLegOriginId";"InboundLegDestinationId";"InboundLegDepartureDate";"QuoteDateTime"' $outfile
	rm -f tmp1.csv
	unset infile
	unset outfile
}

unwrap_places()
{
	# creating Places level csv table from routes.json
	infile=$1
    outfile=$2
	jq '.Places[]? | {
	"PlaceId": (.PlaceId | tostring),
	"PlaceIataCode": .IataCode,
	"PlaceName": .Name,
	"PlaceType": .Type
	} | join("¤")' $infile  > tmp2.csv
	awk '!v[$1]++' tmp2.csv > $outfile
	sed -i 's/¤/";"/g' $outfile
	sed -i 1i'"PlaceId";"PlaceIataCode";"PlaceName";"PlaceType"' $outfile
	rm -f tmp2.csv
	unset infile
	unset outfile
}

unwrap_carriers()
{
	# creating Carriers level csv table from routes.json
	infile=$1
    outfile=$2
	jq '.Carriers[]? | {
	"CarrierId": (.CarrierId | tostring),
	"CarrierName": .Name
	} | join("¤")' $infile  > tmp3.csv
	awk '!v[$1]++' tmp3.csv > $outfile
	sed -i 's/¤/";"/g' $outfile
	sed -i 1i'"CarrierId";"CarrierName"' $outfile
	rm -f tmp3.csv
	unset infile
	unset outfile
}

unwrap_currencies()
{
	# creating Currencies level csv table from routes.json
	infile=$1
    outfile=$2
	jq '.Currencies[]? | {
	"CurrencyCode": .Code,
	"CurrencySymbol": .Symbol,
	"CurrencyThousandsSeparator": .ThousandsSeparator,
	"CurrencyDecimalSeparator": .DecimalSeparator
	} | join("¤")' $infile  > tmp4.csv
	awk '!v[$1]++' tmp4.csv > $outfile
	sed -i 's/¤/";"/g' $outfile
	sed -i 1i'"CurrencyCode";"CurrencySymbol";"CurrencyThousandsSeparator";"CurrencyDecimalSeparator"' $outfile
	rm -f tmp4.csv
	unset infile
	unset outfile
}



##### Main

# the following arguments should be provided by the user of this bash script
for i in "$@"
do
	case $i in
		-co=*|--country=*)
			Country="${i#*=}"
			shift # past argument=value
		;;
		-cu=*|--currency=*)
			Currency="${i#*=}"
			shift # past argument=value
		;;
		-lo=*|--locale=*)
			Locale="${i#*=}"
			shift # past argument=value
		;;
		-orp=*|--originplace=*)
			OriginPlace="${i#*=}"
			shift # past argument=value
		;;
		-dep=*|--destinationplace=*)
			DestinationPlace="${i#*=}"
			shift # past argument=value
		;;
		-oupd=*|--outboundpartialdate=*)
			OutboundPartialDate="${i#*=}"
			shift # past argument=value
		;;
		-inpd=*|--inboundpartialdate=*)
			InboundPartialDate="${i#*=}"
			shift # past argument=value
		;;
		-apk=*|--apikey=*)
			ApiKey="${i#*=}"
			shift # past argument=value
		;;
		*)
			# unknown option
		;;
	esac
done
wait

# composing download link 1st part with arguments
link1="http://partners.api.skyscanner.net/apiservices/browseroutes/v1.0/"${Country}"/"${Currency}"/"${Locale}"/"${OriginPlace}"/"${DestinationPlace}"/"${OutboundPartialDate}

# composing download link 2nd part with an arguments
link2="/"${InboundPartialDate}
length=${#link2}
case "$length" in
	1) link2="" ;;
	esac

# composing download link 3rd part with an argument
link3="?ApiKey="${ApiKey}
length=${#link3}
case "$length" in
	8) link3="?ApiKey="$(grep -w "Insiprational_Flights" ~/Documents/creds.csv | cut -d "," -f3) ;;
	esac 

# composing download links with arguments from parts
link=$link1$link2$link3	

# creating a data folder 
if [ ! -d "./data" ]; then
  mkdir ./data
fi
cd ./data

# downloading json file
#curl -sL $link > routes.json
wget -q $link -O routes.json

# creating csv table from routes.json
unwrap_routes routes.json routes.csv &

# creating csv table from routes.json
unwrap_quotes routes.json quotes.csv &

# creating Places level csv table from routes.json
unwrap_places routes.json places.csv &

# creating Currencies level csv table from routes.json
unwrap_currencies routes.json currencies.csv &

# creating Carriers level csv table from routes.json
unwrap_carriers routes.json carriers.csv &

# waiting for concurent processes to be finished (denoted with & ampersand)
wait

# let us join Quotes and OutboundLegOrigin 
csvjoin --delimiter ';' -u 1 -c "OutboundLegOriginId, PlaceId" --left quotes.csv places.csv | sed -r 's/[^,]+/"&"/g' | sed 's/\,/;/g' > tmp.csv

# renaming columns
sed -i '1s/.*/QuoteId;MinPrice;Direct;OutboundLegCarrierIds;OutboundLegOriginId;OutboundLegDestinationId;OutboundLegDepartureDate;InboundLegCarrierIds;InboundLegOriginId;InboundLegDestinationId;InboundLegDepartureDate;QuoteDateTime;OLO_IataCode;OLO_Name;OLO_Type/' tmp.csv

# let us join Quotes and OutboundLegDestination
csvjoin --delimiter ';' -u 1 -c "OutboundLegDestinationId, PlaceId" --left tmp.csv places.csv | sed -r 's/[^,]+/"&"/g' | sed 's/\,/;/g' > quotes.csv

# renaming columns
sed -i '1s/.*/QuoteId;MinPrice;Direct;OutboundLegCarrierIds;OutboundLegOriginId;OutboundLegDestinationId;OutboundLegDepartureDate;InboundLegCarrierIds;InboundLegOriginId;InboundLegDestinationId;InboundLegDepartureDate;QuoteDateTime;OLO_IataCode;OLO_Name;OLO_Type;OLD_IataCode;OLD_Name;OLD_Type/' quotes.csv

# let us join Quotes and InboundLegOriginId
csvjoin --delimiter ';' -u 1 -c "InboundLegOriginId, PlaceId" --left quotes.csv places.csv | sed -r 's/[^,]+/"&"/g' | sed 's/\,/;/g' > tmp.csv

# renaming columns
sed -i '1s/.*/QuoteId;MinPrice;Direct;OutboundLegCarrierIds;OutboundLegOriginId;OutboundLegDestinationId;OutboundLegDepartureDate;InboundLegCarrierIds;InboundLegOriginId;InboundLegDestinationId;InboundLegDepartureDate;QuoteDateTime;OLO_IataCode;OLO_Name;OLO_Type;OLD_IataCode;OLD_Name;OLD_Type;ILO_IataCode;ILO_Name;ILO_Type/' tmp.csv

# let us join Quotes and OutboundLegCarrier
csvjoin --delimiter ';' -u 1 -c "OutboundLegCarrierIds, CarrierId" --left tmp.csv carriers.csv | sed -r 's/[^,]+/"&"/g' | sed 's/\,/;/g' > quotes.csv

# renaming columns
sed -i '1s/.*/QuoteId;MinPrice;Direct;OutboundLegCarrierIds;OutboundLegOriginId;OutboundLegDestinationId;OutboundLegDepartureDate;InboundLegCarrierIds;InboundLegOriginId;InboundLegDestinationId;InboundLegDepartureDate;QuoteDateTime;OLO_IataCode;OLO_Name;OLO_Type;OLD_IataCode;OLD_Name;OLD_Type;ILO_IataCode;ILO_Name;ILO_Type;OutboundLegCarrierName/' quotes.csv

# let us join Quotes and InboundLegCarrier
csvjoin --delimiter ';' -u 1 -c "InboundLegCarrierIds, CarrierId" --left quotes.csv carriers.csv | sed -r 's/[^,]+/"&"/g' | sed 's/\,/;/g' > tmp.csv

# renaming columns
sed -i '1s/.*/QuoteId;MinPrice;Direct;OutboundLegCarrierIds;OutboundLegOriginId;OutboundLegDestinationId;OutboundLegDepartureDate;InboundLegCarrierIds;InboundLegOriginId;InboundLegDestinationId;InboundLegDepartureDate;QuoteDateTime;OLO_IataCode;OLO_Name;OLO_Type;OLD_IataCode;OLD_Name;OLD_Type;ILO_IataCode;ILO_Name;ILO_Type;OutboundLegCarrierName;InboundLegCarrierName/' tmp.csv

# creating new output filename by adding direction and date to the name of the result file
dt=$(date '+%Y%m%d_%H%M%S')
outfile="routes_"$OriginPlace"_"$DestinationPlace"_"$dt".csv"

# extracting currency related values into variables
Code=$(awk -F';' -v line=2 -v field=1 'NR==line{print $field}' currencies.csv)
Symbol=$(awk -F';' -v line=2 -v field=2 'NR==line{print $field}' currencies.csv)
CurrencyThousandsSeparator=$(awk -F';' -v line=2 -v field=3 'NR==line{print $field}' currencies.csv)
CurrencyDecimalSeparator=$(awk -F';' -v line=2 -v field=4 'NR==line{print $field}' currencies.csv)

# adding currency related columns
awk -F';' -v OFS=';' -v Sym="${Symbol}" -v Cod="${Code}" -v Tho="${CurrencyThousandsSeparator}" -v Dec="${CurrencyDecimalSeparator}" '{print $1, $2, Sym, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, Cod, Tho, Dec}' quotes.csv > $outfile

# renaming columns
sed -i '1s/.*/QuoteId;MinPrice;Symbol;Direct;OutboundLegCarrierIds;OutboundLegOriginId;OutboundLegDestinationId;OutboundLegDepartureDate;InboundLegCarrierIds;InboundLegOriginId;InboundLegDestinationId;InboundLegDepartureDate;QuoteDateTime;OLO_IataCode;OLO_Name;OLO_Type;OLD_IataCode;OLD_Name;OLD_Type;ILO_IataCode;ILO_Name;ILO_Type;OutboundLegCarrierName;InboundLegCarrierName;Code;ThousandsSeparator;DecimalSeparator/' $outfile

# let's show the results on screen
# cat $outfile | csvlook

# removing intermediary files
rm -f routes.json routes.csv quotes.csv tmp.csv places.csv carriers.csv currencies.csv
unset dt
unset infile
unset outfile
